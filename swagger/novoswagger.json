{
  "swagger": "2.0",
  "info": {
    "description": "Esse é o mapeamento de todas as rotas do backend para o jogo Quest, criado como solicitado na disciplina de Engenharia de Software 3.",
    "version": "0.0.2",
    "title": "Quest - Backend",
    "termsOfService": "Not defined",
    "contact": {
      "email": "questgame300@gmail.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://www.google.com"
    }
  },
  "host": "quest3v2.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Base",
      "description": "Páginal Inicial - Antes Login",
      "externalDocs": {
        "description": "Link: ",
        "url": "https://quest3v2.herokuapp.com/"
      }
    },
    {
      "name": "Autenticação e Cadastro",
      "description": "Para registrar usuários",
      "externalDocs": {
        "description": "Link: ",
        "url": "https://quest3v2.herokuapp.com/auth"
      }
    },
    {
      "name": "Perguntas (V1)",
      "description": "Antigo sistema de perguntas - mantido para preservar demo já construído.",
      "externalDocs": {
        "description": "Link: ",
        "url": "https://quest3v2.herokuapp.com/jogo"
      }
    },
    {
      "name": "Perguntas (V2)",
      "description": "Criado para atender requisito -> CRUD Perguntas do Jogo apenas para Super Usuário.",
      "externalDocs": {
        "description": "Link: ",
        "url": "https://quest3v2.herokuapp.com/jogoV2"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Base"
        ],
        "summary": "Teste Servidor Online - Sem Senha",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "Servidor Online - Bem Vindo ao Quest - Cadastre-se ou Faca Login para jogar."
          }
        }
      }
    },
    "/swagger/swagger.json": {
      "get": {
        "tags": [
          "Base"
        ],
        "summary": "Documentação Base JSON",
        "description": "Para documentação e referência do time de desenvolvimento.",
        "produces": [
          "text/html"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Autenticação e Cadastro"
        ],
        "summary": "Para registro de novos usuários",
        "description": "Serve para autenticar o usuário.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "User",
            "description": "Usado para registrar novo usuário.",
            "schema": {
              "$ref": "#/definitions/UserSchemaPre"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário registrado com sucesso.",
            "schema": {
              "$ref": "#/definitions/UserRegistered"
            }
          },
          "400": {
            "description": "Falha - Registro não realizado."
          },
          "412": {
            "description": "Falha - Usuário já existe com esse E-mail.Por favor informe outro e-mail."
          }
        }
      }
    },
    "/auth/authenticate": {
      "post": {
        "tags": [
          "Autenticação e Cadastro"
        ],
        "summary": "Para gerar o Token para garantir autenticação do usuário.",
        "description": "Para autenticar o usuário com base em um e-mail e senha pré-cadastrados.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "User",
            "description": "Usado para gerar um token para ser usado para autenticação. ",
            "schema": {
              "$ref": "#/definitions/UserAuthPre"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usuário autenticado e token criado.",
            "schema": {
              "$ref": "#/definitions/UserAuthPos"
            }
          },
          "400": {
            "description": "Usuário não encontrado com base no e-mail informado."
          },
          "401": {
            "description": "Senha Inválida."
          }
        }
      }
    },
    "/jogo/": {
      "get": {
        "tags": [
          "Perguntas (V1)"
        ],
        "summary": "Home Pós Autenticação do Usuário",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Token validado",
            "schema": {
              "$ref": "#/definitions/UserAuthenticated"
            }
          },
          "401": {
            "description": "Token inválido"
          },
          "411": {
            "description": "Token não informado"
          },
          "412": {
            "description": "Erro no Token"
          },
          "417": {
            "description": "Token formatado incorretamente"
          }
        }
      }
    },
    "/jogo/perguntas": {
      "get": {
        "tags": [
          "Perguntas (V1)"
        ],
        "summary": "Buscar nova pergunta",
        "description": "Retornar uma pergunta que ainda não foi realizada na sessão atual",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Busca de nova pergunta realizada com sucesso."
          },
          "401": {
            "description": "Token inválido"
          },
          "411": {
            "description": "Token não informado"
          },
          "412": {
            "description": "Erro no Token"
          },
          "417": {
            "description": "Token formatado incorretamente"
          },
          "419": {
            "description": "Falha - [req.query.questoes_ja_respondidas] não informado na requisição. Informe o número zero se não respondeu nenhuma pergunta."
          },
          "420": {
            "description": "Falha - [req.query.categoria] não foi informado na requisição ou em branco."
          },
          "427": {
            "description": "Falha - [req.query.categoria] inválida. Escolha entre essas opções: Sociedade, Variedades, Mundo, Esportes, Ciência ou Artes e Entretenimento."
          },
          "430": {
            "description": "Ainda não há outras perguntas cadastradas para."
          }
        }
      }
    },
    "/jogo/novapergunta": {
      "post": {
        "tags": [
          "Perguntas (V1)"
        ],
        "summary": "Cadastro nova pergunta",
        "description": "NÂO UTILIZAR!!! - Serve para o Administrador cadastrar uma nova pergunta.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "Pergunta",
            "description": "Usado para identificar a pergunta. ",
            "schema": {
              "$ref": "#/definitions/Pergunta"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pergunta cadastrada com sucesso."
          },
          "401": {
            "description": "Token inválido"
          },
          "411": {
            "description": "Token não informado"
          },
          "412": {
            "description": "Erro no Token"
          },
          "417": {
            "description": "Token formatado incorretamente"
          }
        }
      }
    },
    "/jogoV2/perguntas": {
      "get": {
        "tags": [
          "Perguntas (V2)"
        ],
        "summary": "Listar todas as perguntas",
        "description": "Fiz um novo get para listar todas as perguntas. Consulta simples, sem possibilidade de filtro.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Receberá a lista com todas as perguntas registradas."
          }
        }
      }
    },
    "/jogoV2/pergunta": {
      "get": {
        "tags": [
          "Perguntas (V2)"
        ],
        "summary": "Listar uma única pergunta para o jogo",
        "description": "Reestruturação da mecânica de pergunta para o jogo, removendo o antido idPergunta para utilizar apenas _id. Esse get é para atender a seguinte regra: Retornar uma única pergunta, com base em uma categoria. Se o usuário já tiver respondido alguma pergunta, essa pergunta não pode ser usada na mesma sessão, então o cliente pode informar o _id da(s) pergunta(s) respondidas.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "filtro",
            "description": "Usado para criar uma pergunta sem o idPergunta.",
            "schema": {
              "$ref": "#/definitions/PerguntaUnica"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Receberá a lista com todas as perguntas registradas."
          }
        }
      },
      "post": {
        "tags": [
          "Perguntas (V2)"
        ],
        "summary": "Cadastro nova pergunta",
        "description": "Fiz um novo post para cadastro de perguntas, agora sem a necessidade do tal do IDpergunta e usando o _id gerado automaticamente pelo Mongo.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "novaPergunta",
            "description": "Usado para criar uma pergunta sem o idPergunta.",
            "schema": {
              "$ref": "#/definitions/Pergunta2"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pergunta cadastrada com sucesso."
          },
          "401": {
            "description": "Token inválido"
          },
          "411": {
            "description": "Token não informado"
          },
          "412": {
            "description": "Erro no Token"
          },
          "417": {
            "description": "Token formatado incorretamente"
          },
          "461": {
            "description": "Faltou informar a categoria"
          },
          "462": {
            "description": "Faltou informar a pergunta"
          },
          "463": {
            "description": "Faltou informar a resposta correta"
          },
          "464": {
            "description": "Faltou informar a alternativa A"
          },
          "465": {
            "description": "Faltou informar a alternativa B"
          },
          "466": {
            "description": "Faltou informar a alternativa C"
          },
          "467": {
            "description": "Faltou informar a alternativa D"
          },
          "468": {
            "description": "Faltou informar a fonte da pergunta"
          },
          "469": {
            "description": "Erro de conexão do Mongo, verifique a URI apontada!"
          },
          "470": {
            "description": "Erro ao tentar registrar uma nova pergunta. Pode ser que o ID já tenha sido usado - Avise ao Bruno que o erro foi antes de tentar cadastrar."
          },
          "471": {
            "description": "Erro ao tentar registrar uma nova pergunta. Pode ser que o ID já tenha sido usado - Avise ao Bruno que o erro foi após tentar cadastrar."
          }
        }
      },
      "put": {
        "tags": [
          "Perguntas (V2)"
        ],
        "summary": "Alterar uma pergunta",
        "description": "Para alterar uma pergunta com base em um _id específico. Precisa enviar todos os campos, se não enviar vai deixar o atributo na pergunta em branco!.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "novaPergunta",
            "description": "Usado para criar uma pergunta sem o idPergunta.",
            "schema": {
              "$ref": "#/definitions/Pergunta2"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pergunta alterada com sucesso."
          }
        }
      },
      "delete": {
        "tags": [
          "Perguntas (V2)"
        ],
        "summary": "Deletar uma pergunta",
        "description": "Para deletar uma pergunta com base em um _id específico.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "type": "string",
            "name": "authorization",
            "description": "Token do usuário para validar acesso ao jogo. Deve ser composto por Bearer + 'espaço' + Token, caso contrário será considerado inválido.",
            "required": true
          },
          {
            "in": "body",
            "name": "_id",
            "description": "_id da pergunta que será deletada.",
            "schema": {
              "$ref": "#/definitions/PerguntaDeletar"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pergunta deletada com sucesso."
          },
          "461": {
            "description": "Falha ao conectar com o Servidor do Banco de Dados"
          },
          "462": {
            "description": "Falha ao deletar - Possível que o ID seja inválido ou não exista."
          },
          "463": {
            "description": "Falha ao deletar - Confirmação de exclusão não recebida."
          }
        }
      }
    }
  },
  "definitions": {
    "UserAuthPre": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserAuthPre"
      }
    },
    "UserAuthPos": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserAuthPos"
      }
    },
    "UserSchemaPre": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserSchemaPre"
      }
    },
    "UserSchemaPos": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "dateTime"
        },
        "id": {
          "type": "string"
        },
        "__v": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "UserSchemaPos"
      }
    },
    "UserRegistered": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/UserSchemaPos"
        },
        "token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserRegistered"
      }
    },
    "UserAuthenticated": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "description": "TRUE se usuário for autenticado com sucesso."
        },
        "user": {
          "type": "string",
          "description": "ID do usuário no Banco de Dados - Campo '_id'"
        }
      },
      "xml": {
        "name": "UserAuthenticated"
      }
    },
    "Pergunta": {
      "type": "object",
      "required": [
        "idPergunta",
        "categoria",
        "respostaCorreta",
        "alternativaA",
        "alternativaB",
        "alternativaC",
        "alternativaD",
        "info"
      ],
      "properties": {
        "idPergunta": {
          "type": "string"
        },
        "categoria": {
          "type": "string"
        },
        "respostaCorreta": {
          "type": "string"
        },
        "alternativaA": {
          "type": "string"
        },
        "alternativaB": {
          "type": "string"
        },
        "alternativaC": {
          "type": "string"
        },
        "alternativaD": {
          "type": "string"
        },
        "info": {
          "type": "string"
        }
      },
      "xml": {
        "name": "pergunta"
      }
    },
    "Pergunta2": {
      "type": "object",
      "required": [
        "categoria",
        "respostaCorreta",
        "alternativaA",
        "alternativaB",
        "alternativaC",
        "alternativaD",
        "info"
      ],
      "properties": {
        "categoria": {
          "type": "string"
        },
        "respostaCorreta": {
          "type": "string"
        },
        "alternativaA": {
          "type": "string"
        },
        "alternativaB": {
          "type": "string"
        },
        "alternativaC": {
          "type": "string"
        },
        "alternativaD": {
          "type": "string"
        },
        "info": {
          "type": "string"
        }
      },
      "xml": {
        "name": "pergunta2"
      }
    },
    "PerguntaDeletar": {
      "type": "object",
      "required": [
        "_id"
      ],
      "properties": {
        "_id": {
          "type": "string"
        }
      },
      "xml": {
        "name": "perguntadeletar"
      }
    },
    "PerguntaUnica": {
      "type": "object",
      "required": [
        "categoria",
        "questoes_ja_respondidas"
      ],
      "properties": {
        "categoria": {
          "type": "string"
        },
        "questoes_ja_respondidas": {
          "type": "string"
        }
      },
      "xml": {
        "name": "perguntaunica"
      }
    }
  }
}